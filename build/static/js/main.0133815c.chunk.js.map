{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBackSpace","e","_this$state","state","backPress","selectedData","target","value","keyCode","lastItem","length","setState","prevState","filter","data","id","availableData","concat","toConsumableArray","map","index","objectSpread","select","handleChange","chip","filteredData","name","toLowerCase","includes","handleSelectData","find","handleRemove","isLoaded","_this2","axios","get","then","res","window","addEventListener","_this3","_this$state2","react_default","a","createElement","className","key","src","image","alt","onClick","type","placeholder","onChange","cellPadding","cellSpacing","email","style","fontSize","padding","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0133815c.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\nclass App extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            chip: \"\",\n            data: [],\n            availableData: [],\n            filteredData: [],\n            selectedData: [],\n            isLoaded: false,\n            backPress: 0\n        }\n    }\n\n    componentDidMount(){\n        axios.get(\"http://ruckus.asia/edm/fee/data.php\")\n            .then(res => {\n                this.setState(() => ({\n                    data: res.data,\n                    availableData: res.data,\n                    isLoaded: true\n                }))\n            })\n        window.addEventListener(\"keydown\", this.handleBackSpace)\n    }\n\n    handleBackSpace = (e) => {\n        const { backPress, selectedData } = this.state\n        const value = e.target.value\n        if(value === \"\" && e.keyCode === 8){\n            if(backPress === 1){\n                const lastItem = selectedData[selectedData.length - 1]\n\n                this.setState((prevState) => ({\n                    backPress: 0,\n                    selectedData: prevState.selectedData.filter(data => data.id !== lastItem.id),\n                    availableData: [...prevState.availableData, lastItem]\n                }))\n            }else if(backPress === 0){\n                this.setState((prevState) => ({\n                    backPress: 1,\n                    selectedData: prevState.selectedData.map((data,index) => (prevState.selectedData.length - 1) === index ? {...data, ...{select: true}} : data )\n                }))\n            }else{\n                this.setState((prevState) => ({\n                    backPress: 1\n                }))\n            }\n        }else{\n            this.setState(() => ({\n                backPress: 0\n            }))\n        }\n    }\n\n    handleChange = (e) => {\n        const value = e.target.value\n        this.setState((prevState) => ({\n            chip: value,\n            filteredData: value.length > 0 ? prevState.availableData.filter(data => data.name.toLowerCase().includes(value.toLowerCase())): []\n        }))\n        this.handleBackSpace(e)\n    }\n\n    handleSelectData = (id) => {\n        this.setState((prevState) => ({\n            chip: \"\",\n            filteredData: [],\n            availableData: prevState.availableData.filter(data => data.id !== id),\n            selectedData: [...prevState.selectedData, prevState.data.find(data => data.id === id)]\n        }))\n    }\n\n    handleRemove = (id) => {\n        this.setState((prevState) => ({\n            chip: \"\",\n            filteredData: [],\n            availableData: [...prevState.availableData, prevState.data.find(data => data.id === id)],\n            selectedData: prevState.selectedData.filter(data => data.id !== id)\n        }))\n    }\n\n    render(){\n        const { chip, isLoaded, filteredData, selectedData } = this.state\n        return (\n            <div className=\"wrapper\">\n                { isLoaded && \n                <div className=\"chipBox\">\n                    { selectedData.length ?\n                        selectedData.map(data => {\n                            return (\n                                <div key={data.id} className={`selectedChip ${data.select ? 'active' : ''}`}>\n                                    <img src={data.image} alt={data.name} />\n                                    <label>{data.name}</label>\n                                    <button onClick={() => {\n                                        this.handleRemove(data.id)\n                                    }}>x</button>\n                                </div>\n                            )\n                        }) : \"\"\n                    }\n                    \n                    <div className=\"input\">\n                        <input type=\"text\"\n                               placeholder=\"Type Here\"\n                               onChange={this.handleChange}\n                               value={chip}\n                            />\n\n                        <div className=\"dropdown\">\n                            <table cellPadding=\"0\" cellSpacing=\"0\">\n                                <tbody>\n                                    { filteredData.length > 0 ?\n                                        filteredData.map(data => {\n                                            return (\n                                                <tr key={data.id} onClick={() => {\n                                                        this.handleSelectData(data.id)\n                                                    }}>\n                                                    <td><img src={data.image} alt={data.name} /></td>\n                                                    <td><label>{data.name}</label></td>\n                                                    <td><span>{data.email}</span></td>\n                                                </tr>\n                                            )\n                                        }) : chip.length > 0 &&\n                                        <tr>\n                                            <td style={{fontSize: '14px', padding: '20px'}}>No Results Found</td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()"],"sourceRoot":""}